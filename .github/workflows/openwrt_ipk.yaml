name: "Auto compile with OpenWrt SDK"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: "x64"
  push:
    branches:
      - 'main'
    paths:
      - 'luci-app-tailscale/Makefile'
env:
  TZ: Asia/Jakarta


jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Detect build target
        id: set-matrix
        env:
          MATRIX_TARGET: ${{ github.event.inputs.target }}
        run: |
          if [ "x${MATRIX_TARGET}" = "x" -o "x${MATRIX_TARGET}" = "xall" ]; then \
            echo "matrix={\"target\":[\"arm64\", \"x64\", \"mipsel\"]}" >> $GITHUB_OUTPUT; \
          else \
            targets=""; \
            for target in ${MATRIX_TARGET}; do \
              targets="$targets, \"$target\"";
            done; \
            echo "matrix={\"target\":[${targets#, }]}" >> $GITHUB_OUTPUT; \
          fi
  build:
    needs: matrix
    runs-on: ubuntu-latest
    name: Build IPKs for ${{ matrix.target }}
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      # 拉取项目代码
      - name: Checkout the code
        uses: actions/checkout@v3

      # 安装 nodejs
      # https://github.com/marketplace/actions/setup-node-js-environment
      - name: Setup Nodejs
        uses: actions/setup-node@v3

      # 安装 pnpm
      - run: |
          npm install pnpm -g

      # 打包 web 项目
      - run: |
          cd web
          pnpm install
          pnpm run build

      # 复制 web至 luci
      - run: |
          mkdir ${IPK_NAME}/htdocs
          cp -r web/dist/luci-static ${IPK_NAME}/htdocs



  job_build_tailscale:
    name: Build Tailscale app (main)
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache openwrt SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          key: openwrt-sdk-21.02-x86-64

      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/21.02.5/targets/x86/64/openwrt-sdk-21.02.5-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk  
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-21.02" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;openwrt-21.02" >> feeds.conf
          echo "src-git-full luci https://git.openwrt.org/project/luci.git;openwrt-21.02" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;openwrt-21.02"  >> feeds.conf
          git clone -b main https://github.com/${{ github.repository }}.git package/downloads/luci-theme-alpha
          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_luci-app-tailscale=m" > .config
          ./scripts/feeds install -d n luci-app-tailscale
          make download -j8

      - name: Configure Tailscale app (main)
        run: |
          cd sdk
          ./scripts/feeds install luci-app-tailscale
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=n" >> .config
          echo "CONFIG_PACKAGE_luci-app-tailscale=m" >> .config
          make defconfig

      - name: Compile Tailscale app (main)
        id: compile
        run: |
          cd sdk
          echo "make package/luci-app-tailscale/{clean,compile} -j$(nproc)"
          make package/luci-app-tailscale/{clean,compile} -j$(nproc)
          mv bin/packages/x86_64/base/ ../
          rm .config .config.old
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload Tailscale app (main) ipks to release
        uses: softprops/action-gh-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.alpha_version}}
          files: ${{ env.FIRMWARE }}/base/luci-app*.ipk
